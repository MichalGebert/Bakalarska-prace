# Select image from https://hub.docker.com/_/php/
image: php:8.1

# Define stages
stages:
  - Built
  - Code Quality
  - Tests

workflow:
  rules:
    # Run this pipeline only when target branch is pre-release
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "pre-release"

# Select what we should cache between builds (Usually you use caches to avoid downloading content, like dependencies or libraries, each time you run a job)
cache:
  # Share caches between jobs in the same branch (one-key-to-rule-them-all for share a cache across all branches and all jobs, use the same key for everything)
  key: $CI_COMMIT_REF_SLUG
  paths:
    # If project uses Composer to install PHP dependencies, the following example defines cache globally so that all jobs inherit it. PHP libraries modules are installed in vendor/ and are cached per-branch:
    - vendor/

# Install composer dependencies
composer:
  stage: Built
  script:
    # Install git and unzip (composer will need them)
    - apt-get update -yqq
    - apt-get install git libzip-dev zip -yqq
    # Install mysql driver
    - docker-php-ext-install pdo pdo_mysql zip
    # Install composer
    - curl --show-error --silent https://getcomposer.org/installer | php
    # Set token for paypal private repository
    - php composer.phar config --global github-oauth.github.com token
    # Install all project dependencies
    - php composer.phar install --no-interaction --ignore-platform-req=ext-soap

# Run Static Analysis tests via PHPStan
PHPStan:
  stage: Code Quality
  # This job may fail but the pipeline will continue
  allow_failure: true
  script:
    # Run PHPStan for static analysis tests and create a JSON file in the format accepted by GitLabâ€™s code quality report
    - php vendor/bin/phpstan analyse --no-progress --memory-limit=-1 --error-format gitlab > phpstan-report.json -c phpstan.neon
  artifacts:
    paths:
      - phpstan-report.json
    expire_in: 7 days
    when: always
    reports:
      codequality: phpstan-report.json

# Run Static Analysis tests via PHP_CodeSniffer
PHP_CodeSniffer:
  stage: Code Quality
  # This job may fail but the pipeline will continue
  allow_failure: true
  script:
    - php vendor/bin/phpcs --standard=PSR12 -n -p --severity=5 app/modules/Web/ --report=full > phpcs-report.txt
  artifacts:
    paths:
      - phpcs-report.txt
    expire_in: 7 days
    when: always

# Run CodeCaption Unit tests
unit-tests:
  stage: Tests
  script:
    - php vendor/bin/codecept run unit --steps --html --xml
  artifacts:
    expire_in: 7 days
    when: always
    paths:
      - tests/_output
    # make the report available in Gitlab UI. see https://docs.gitlab.com/ee/ci/unit_test_reports.html
    reports:
      junit: tests/_output/report.xml

# Run CodeCaption Acceptance (PhpBrowser) tests
acceptance-phpbrowser-tests:
  stage: Tests
  script:
    - php vendor/bin/codecept run acceptancePhpBrowser --steps --html
  artifacts:
    expire_in: 7 days
    when: always
    paths:
      - tests/_output

# Run CodeCaption Acceptance (WebDriver) tests
acceptance-webdriver-tests:
  stage: Tests
  services:
    - name: selenium/standalone-chrome:4.2.2-20220609
  script:
    - php vendor/bin/codecept run acceptanceChrome --steps --xml --html
  artifacts:
    expire_in: 7 days
    when: always
    paths:
      - tests/_output
    # make the report available in Gitlab UI. see https://docs.gitlab.com/ee/ci/unit_test_reports.html
    reports:
      junit: tests/_output/report.xml